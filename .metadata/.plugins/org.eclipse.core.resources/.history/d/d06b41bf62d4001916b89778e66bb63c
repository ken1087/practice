package com.cos.pratice.controller;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.ResponseBody;

import com.cos.pratice.dao.UserDAO;
import com.cos.pratice.domain.Users;
import com.cos.pratice.domain.UsersPk;



@Controller
public class UserListController {

	@Autowired
	UserDAO userDAO;
	
	String tag = "UsersListController : ";
	//User select*
	@GetMapping("/homework") //http://localhost:8000/homeworkの場合
	public String home(Model model){
		List<LinkedHashMap<String,Object>> user = new ArrayList<LinkedHashMap<String,Object>>();
	
		user = userDAO.findAllList();
		
		model.addAttribute("users", user);	// List UsersをJspFileに渡すためにmodelに格納する
		return "homework";	 	//　homework.jspにreturnする
		
	}
	
	
	
	//검색기능
	@GetMapping("/search")	// http://localhost:8000/searchの場合、
	public String search(Model model, Integer num,String userid,Integer stdnum,Integer mynum,Integer phone){	//5個のPrimary Keyのデータを要請
		
		List<LinkedHashMap<String, Object>> user = new ArrayList<LinkedHashMap<String,Object>>();
		List<LinkedHashMap<String,Object>> search = new ArrayList<LinkedHashMap<String,Object>>();
		List<LinkedHashMap<String,Object>> search2 = new ArrayList<LinkedHashMap<String,Object>>();
		user = userDAO.findAllList();
		System.out.println(user);
		System.out.println("UserID : "+userid);
		if(userid.equals("")) {userid = null;}
		
		if(num != null || userid != null || stdnum != null|| mynum != null|| phone != null) {
			for(int i = 0; i<user.size(); i++) {
				if(user.get(i).get("num").equals(num)) {
					search.add(user.get(i));
				}
				if(user.get(i).get("userid").equals(userid)) {
					search.add(user.get(i));
				}
				if(user.get(i).get("stdnum").equals(stdnum)) {
					search.add(user.get(i));
				}
				if(user.get(i).get("mynum").equals(mynum)) {
					search.add(user.get(i));
				}
				if(user.get(i).get("phone").equals(phone)) {
					search.add(user.get(i));
				}
			}
		}
		////////////////////////////////////////////////////////////////////////////
		for(LinkedHashMap<String, Object> list : search) {
			if(search2.contains(list) == false) {
				search2.add(list);
			}
		}
		///////////////////////////////////////////////////////////////////////////
		if(num != null) {
			for(int k = search2.size()-1; k>=0; k--) {
				if(!search2.get(k).get("num").equals(num)) {
					search2.remove(k);
				}
			}
		}
		if(userid != null) {
			for(int k = search2.size()-1; k>=0; k--) {
				if(!search2.get(k).get("userid").equals(userid)) {
					search2.remove(k);
				}
			}
		}
		if(stdnum != null) {
			for(int k = search2.size()-1; k>=0; k--) {
				if(!search2.get(k).get("stdnum").equals(stdnum)) {
					search2.remove(k);
				}
			}
		}
		if(mynum != null) {
			for(int k = search2.size()-1; k>=0; k--) {
				if(!search2.get(k).get("mynum").equals(mynum)) {
					search2.remove(k);
				}
			}
		}
		if(phone != null) {
			for(int k = search2.size()-1; k>=0; k--) {
				if(!search2.get(k).get("phone").equals(phone)) {
					search2.remove(k);
				}
			}
		}
		

		//　検索欄に入力したデータ
		model.addAttribute("num", num);
		model.addAttribute("userid", userid);
		model.addAttribute("stdnum", stdnum);
		model.addAttribute("mynum", mynum);
		model.addAttribute("phone", phone);
			
		//List UsersをJsp　fileに渡すためにmodelに格納する
		model.addAttribute("search", search2);
		return "search";
	}
	
	
	//data insert page
	@GetMapping("/insert") //http://localhost:8000/insertの場合
	public String insert() {
		return "insert"; //insert.jspのページに移動する
	}
	
	//data insert
	 @PostMapping("/datainsert")	//http://localhost:8000/datainsertの場合 　
	 public String datainsert(Users user, UsersPk userspk) {
		 
		 userDAO.sava(user, userspk);	//入力したPrimary Key 5個と以外の10個の項目合わせる
		// userRepository.save(users);	//入力した内容をinsertする
	 
		 return "redirect:homework"; //入力するとhttp://localhost:8000/homeworkに戻る
	 
	 }
 	//data 입력 중복체크
	@PostMapping("/checkid")
	public @ResponseBody int checkid(@RequestBody UsersPk userpk) {
		List<LinkedHashMap<String, Object>> user = new ArrayList<LinkedHashMap<String,Object>>();
		
		user = userDAO.findAllList();
		System.out.println(userpk.getNum()+" "+userpk.getUserid()+" "+userpk.getStdnum()+" "+userpk.getMynum()+" "+userpk.getPhone());
		int check = 1;
		System.out.println(user.size());
		
		if(user.size() != 0) {
			System.out.println("data가 있습니다.");
			for(int i =0; i<user.size(); i++) {
				
				
				if( user.get(i).get("num").equals(userpk.getNum())&&
					user.get(i).get("userid").equals(userpk.getUserid())&&
					user.get(i).get("stdnum").equals(userpk.getStdnum())&&
					user.get(i).get("mynum").equals(userpk.getMynum())&&
					user.get(i).get("phone").equals(userpk.getPhone())) {
					
					System.out.println(user.get(i).get("num"));
					System.out.println(user.get(i).get("userid"));
					System.out.println(user.get(i).get("stdnum"));
					System.out.println(user.get(i).get("mynum"));
					System.out.println(user.get(i).get("phone"));
					
					System.out.println("검사 했습니다");
					check = 0;
					break;
				}
			}
		}else {
			check = 0;
		}
		return check;
	}
	
	@GetMapping("/read")
	public String read() {
		List<LinkedHashMap<String, Object>> user = new ArrayList<LinkedHashMap<String,Object>>();
		user = userDAO.findAllList();
		return "redirect:search";
		
	}
	
}

